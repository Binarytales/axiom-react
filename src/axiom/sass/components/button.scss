@import '../core/mixins';
@import './_mixins/scheme';

$button-padding-v-sm: 0;
$button-padding-h-sm: $component-padding-h-sm;
$button-font-size-sm: $font-size-sm;

$button-padding-v-md: $component-padding-v-sm;
$button-padding-h-md: $component-padding-h-sm;
$button-font-size-md: $font-size-md;

$button-padding-v-lg: $component-padding-v-base;
$button-padding-h-lg: $component-padding-h-base;
$button-font-size-lg: $font-size-base;

/**
 * Standard button styling
 */
button {
  margin: 0;
  padding: 0;
  outline: 0;
  background: none;
  border: none;
}

.ax-button {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  border-width: $component-border-width-base;
  border-style: solid;
  border-color: transparent;
  border-radius: $border-radius-base;
  background-color: transparent;
  font-weight: $font-weight-strong;
  text-align: center;
  cursor: pointer;

  &:hover {
    cursor: pointer;
  }

  &[disabled],
  &[disabled]:hover,
  &[disabled]:active {
    cursor: default;
  }

  @include inlineBlockSpace($component-margin-h-sm);
  @include transition(( background-color, border-color, color ), $transition-time-fast);
}


/**
 * Size buttons
 */
.ax-button--sm {
  padding: $button-padding-v-sm $button-padding-h-sm;
  font-size: $button-font-size-sm;
}

.ax-button--md {
  padding: $button-padding-v-md $button-padding-h-md;
  font-size: $button-font-size-md;
}

.ax-button--lg {
  padding: $button-padding-v-lg $button-padding-h-lg;
  font-size: $button-font-size-lg;
}

/**
 * Full width buttons
 */
@mixin fullWidthButton {
  display: block;
  width: 100%;
  @include blockSpace($component-margin-v-sm);
}

.ax-button--full {
  @include fullWidthButton;
}

@include forEachBreakpoint {
  @include screenLessThan {
    .ax-button--full--#{breakpointProp(id)} {
      @include fullWidthButton;
    }
  }
}


/**
 * Button Colours
 */
@mixin buttonFilledColor($color) {
  border-color: getColor($color, 500);
  background-color: getColor($color, 400);
  color: schemeTextColor(getColor($color, 400));

  &:hover {
    border-color: getColor($color, 600);
    background-color: getColor($color, 500);
    color: schemeTextColor(getColor($color, 500));
  }

  &:active,
  &.active {
    border-color: getColor($color, 700);
    background-color: getColor($color, 600);
    color: schemeTextColor(getColor($color, 600));
  }

  &[disabled],
  &[disabled]:hover,
  &[disabled]:active {
    border-color: getColor($color, 100);
    background-color: getColor($color, 50);
    color: getColor($color, 100);
  }
}

@mixin buttonOutlinedColor($color) {
  border-color: getColor($color, 500);
  color: getColor($color, 500);

  &:hover {
    border-color: getColor($color, 600);
    color: getColor($color, 600);
  }

  &:active,
  &.active {
    border-color: getColor($color, 700);
    background-color: getColor($color, 600);
    color: schemeTextColor(getColor($color, 600));
  }

  &[disabled],
  &[disabled]:hover,
  &[disabled]:active {
    border-color: getColor($color, 100);
    color: getColor($color, 100);
  }
}

@include forEachScheme {
  @include forEachColor {
    .ax-button--#{colorProp(name)} {
      &:not(.ax-button--outlined) {
        @include buttonFilledColor(colorProp(color));
      }

      &.ax-button--outlined {
        @include buttonOutlinedColor(colorProp(color));
      }
    }
  }

  .ax-button--primary {
    &:not(.ax-button--outlined) {
      @include buttonFilledColor(schemeProp(primary));
    }

    &.ax-button--outlined {
      @include buttonOutlinedColor(schemeProp(primary));
    }
  }
}


/**
 * Circular buttons
 */
.ax-button--circular {
  padding: 0;
  border-radius: 50%;

  &.ax-button--sm {
    height: $line-height + ($button-padding-v-sm * 2);
    width: $line-height + ($button-padding-v-sm * 2);
  }

  &.ax-button--md {
    height: $line-height + ($button-padding-v-md * 2);
    width: $line-height + ($button-padding-v-md * 2);
  }

  &.ax-button--lg {
    height: $line-height + ($button-padding-v-lg * 2);
    width: $line-height + ($button-padding-v-lg * 2);
  }
}


/**
 * Button icon
 */
.ax-button__icon {
  &:not(.ax-button__icon--circular) {
    margin-right: $component-margin-h-sm;
  }
}


/**
 * Button group
 * Trick to allow buttons to vertically space themselves
 * when stacked when going responsive.
 */
.ax-button__group {
  @include blockSpace($component-margin-v-base);

  &:last-child {
    margin-bottom: -$component-margin-h-sm;
  }

  > .ax-button {
    margin-top: 0!important;
    margin-bottom: $component-margin-v-sm !important;
  }
}
